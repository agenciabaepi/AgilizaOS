import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    
    // Extrair par√¢metros da query string
    const hubMode = searchParams.get('hub.mode');
    const hubVerifyToken = searchParams.get('hub.verify_token');
    const hubChallenge = searchParams.get('hub.challenge');
    
    console.log('üîç Webhook GET - Valida√ß√£o:', {
      hubMode,
      hubVerifyToken,
      hubChallenge,
      expectedToken: process.env.WHATSAPP_VERIFY_TOKEN
    });
    
    // Verificar se todos os par√¢metros necess√°rios est√£o presentes
    if (!hubMode || !hubVerifyToken || !hubChallenge) {
      console.error('‚ùå Par√¢metros obrigat√≥rios ausentes');
      return NextResponse.json(
        { error: 'Par√¢metros obrigat√≥rios ausentes' },
        { status: 400 }
      );
    }
    
    // Verificar se o token de verifica√ß√£o est√° correto
    if (hubVerifyToken === process.env.WHATSAPP_VERIFY_TOKEN) {
      console.log('‚úÖ Token de verifica√ß√£o v√°lido - Respondendo com challenge');
      return new NextResponse(hubChallenge, { status: 200 });
    } else {
      console.error('‚ùå Token de verifica√ß√£o inv√°lido');
      return NextResponse.json(
        { error: 'Token de verifica√ß√£o inv√°lido' },
        { status: 403 }
      );
    }
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o GET:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    // Receber o body da requisi√ß√£o
    const body = await request.json();
    
    console.log('üì® Webhook POST - Mensagem recebida:', JSON.stringify(body, null, 2));
    
    // Aqui voc√™ pode adicionar l√≥gica adicional para processar as mensagens
    // Por exemplo: salvar no banco de dados, enviar notifica√ß√µes, etc.
    
    return NextResponse.json(
      { status: 'success', message: 'Webhook recebido com sucesso' },
      { status: 200 }
    );
    
  } catch (error) {
    console.error('‚ùå Erro no recebimento POST:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
