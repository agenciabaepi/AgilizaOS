import { NextRequest, NextResponse } from 'next/server';
import { createAdminClient } from '@/lib/supabaseClient';
import { formatPhoneNumber } from '@/lib/utils';

export async function GET(req: NextRequest) {
  const logs: string[] = [];
  
  function addLog(message: string) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    logs.push(logMessage);
    console.log(logMessage);
  }

  try {
    const osId = '64bdea43-ebb8-4044-85b5-b45c6da1df4a';
    addLog('üîç DEBUG DETALHADO: Iniciando an√°lise completa...');

    const supabase = createAdminClient();

    // 1. Buscar dados da OS
    addLog('üìã PASSO 1: Buscando dados da OS...');
    const { data: osData, error: osError } = await supabase
      .from('ordens_servico')
      .select(`
        id,
        numero_os,
        cliente_id,
        tecnico_id,
        status,
        status_tecnico,
        servico,
        created_at,
        clientes!inner(nome, telefone)
      `)
      .eq('id', osId)
      .single();

    if (osError) {
      addLog(`‚ùå ERRO OS: ${JSON.stringify(osError)}`);
      return NextResponse.json({ 
        error: 'OS n√£o encontrada', 
        details: osError,
        logs: logs
      }, { status: 500 });
    }

    addLog(`‚úÖ OS encontrada: #${osData.numero_os} - Status: ${osData.status} - T√©cnico ID: ${osData.tecnico_id}`);
    addLog(`üë§ Cliente: ${(osData.clientes as any)?.nome} - Telefone: ${(osData.clientes as any)?.telefone}`);

    // 2. Buscar dados do t√©cnico espec√≠fico
    addLog('üë®‚Äçüîß PASSO 2: Buscando t√©cnico espec√≠fico...');
    let { data: tecnicoData, error: tecnicoError } = await supabase
      .from('usuarios')
      .select('id, nome, whatsapp, email, nivel')
      .eq('id', osData.tecnico_id)
      .eq('nivel', 'tecnico')
      .single();

    if (tecnicoError && tecnicoError.code === 'PGRST116') {
      addLog(`‚ö†Ô∏è T√©cnico espec√≠fico n√£o encontrado, buscando fallback...`);
      
      // 3. Buscar qualquer t√©cnico como fallback
      const { data: fallbackTecnico, error: fallbackError } = await supabase
        .from('usuarios')
        .select('id, nome, whatsapp, email, nivel')
        .eq('nivel', 'tecnico')
        .limit(1)
        .single();
      
      if (!fallbackError && fallbackTecnico) {
        tecnicoData = fallbackTecnico;
        tecnicoError = null;
        addLog(`‚úÖ Usando t√©cnico fallback: ${fallbackTecnico.nome}`);
      } else {
        addLog(`‚ùå ERRO FALLBACK: ${JSON.stringify(fallbackError)}`);
      }
    } else if (tecnicoError) {
      addLog(`‚ùå ERRO T√âCNICO: ${JSON.stringify(tecnicoError)}`);
    } else {
      addLog(`‚úÖ T√©cnico espec√≠fico encontrado: ${tecnicoData.nome}`);
    }

    if (!tecnicoData) {
      addLog('‚ùå NENHUM T√âCNICO ENCONTRADO');
      return NextResponse.json({
        success: false,
        message: 'Nenhum t√©cnico encontrado',
        osData: {
          id: osData.id,
          numero_os: osData.numero_os,
          status: osData.status,
          tecnico_id: osData.tecnico_id,
          cliente_nome: (osData.clientes as any)?.nome
        },
        logs: logs
      });
    }

    addLog(`üë®‚Äçüîß T√©cnico final: ${tecnicoData.nome} - WhatsApp: ${tecnicoData.whatsapp} - N√≠vel: ${tecnicoData.nivel}`);

    // 4. Verificar whatsapp
    if (!tecnicoData.whatsapp) {
      addLog('‚ùå T√âCNICO SEM WHATSAPP CADASTRADO');
      return NextResponse.json({
        success: false,
        message: 'T√©cnico sem whatsapp cadastrado',
        osData: {
          id: osData.id,
          numero_os: osData.numero_os,
          status: osData.status,
          tecnico_id: osData.tecnico_id,
          cliente_nome: (osData.clientes as any)?.nome
        },
        tecnicoData: {
          id: tecnicoData.id,
          nome: tecnicoData.nome,
          whatsapp: tecnicoData.whatsapp,
          nivel: tecnicoData.nivel
        },
        logs: logs
      });
    }

    // 5. Testar formata√ß√£o do n√∫mero
    addLog('üì± PASSO 3: Testando formata√ß√£o do n√∫mero...');
    const formattedNumber = formatPhoneNumber(tecnicoData.whatsapp);
    addLog(`üì± N√∫mero original: ${tecnicoData.whatsapp}`);
    addLog(`üì± N√∫mero formatado: ${formattedNumber}`);

    if (!formattedNumber) {
      addLog('‚ùå N√öMERO INV√ÅLIDO - N√£o foi poss√≠vel formatar');
      return NextResponse.json({
        success: false,
        message: 'N√∫mero de whatsapp inv√°lido',
        osData: {
          id: osData.id,
          numero_os: osData.numero_os,
          status: osData.status,
          tecnico_id: osData.tecnico_id,
          cliente_nome: (osData.clientes as any)?.nome
        },
        tecnicoData: {
          id: tecnicoData.id,
          nome: tecnicoData.nome,
          whatsapp: tecnicoData.whatsapp,
          nivel: tecnicoData.nivel
        },
        formattedNumber: formattedNumber,
        logs: logs
      });
    }

    // 6. Verificar vari√°veis de ambiente
    addLog('üîë PASSO 4: Verificando vari√°veis de ambiente...');
    const WHATSAPP_ACCESS_TOKEN = 'EAATEn3qAZAgsBPZA6044TOzGpj2fbuepMYMkQVoZAgDTmixjpqy5YSZCYijxZAMZAEBjap3axvOzloz9yE72Enod7xAld6ZChbToZC6KWxla1rEVcZBgdpKEi1VOrZB58yzY2BpETevNFaOEF2n6pFc8H72bOWm1jhJjMtarJMD4XiVuoKmfKnCuB1kp1JZBZB0n3XvZAagZDZD';
    const WHATSAPP_PHONE_NUMBER_ID = process.env.WHATSAPP_PHONE_NUMBER_ID;
    
    addLog(`üîë TOKEN: ${WHATSAPP_ACCESS_TOKEN ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    addLog(`üîë PHONE_ID: ${WHATSAPP_PHONE_NUMBER_ID ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);

    if (!WHATSAPP_ACCESS_TOKEN || !WHATSAPP_PHONE_NUMBER_ID) {
      addLog('‚ùå VARI√ÅVEIS DE AMBIENTE FALTANDO');
      return NextResponse.json({
        success: false,
        message: 'Vari√°veis de ambiente faltando',
        osData: {
          id: osData.id,
          numero_os: osData.numero_os,
          status: osData.status,
          tecnico_id: osData.tecnico_id,
          cliente_nome: (osData.clientes as any)?.nome
        },
        tecnicoData: {
          id: tecnicoData.id,
          nome: tecnicoData.nome,
          whatsapp: tecnicoData.whatsapp,
          nivel: tecnicoData.nivel
        },
        formattedNumber: formattedNumber,
        envVars: {
          token: !!WHATSAPP_ACCESS_TOKEN,
          phoneId: !!WHATSAPP_PHONE_NUMBER_ID
        },
        logs: logs
      });
    }

    // 7. Testar envio real
    addLog('üöÄ PASSO 5: Testando envio real de mensagem...');
    
    const message = `üéâ *OS APROVADA!*

üìã *OS #${osData.numero_os}*
üë§ *Cliente:* ${(osData.clientes as any)?.nome}
üîß *Servi√ßo:* ${osData.servico || 'Servi√ßo n√£o especificado'}
‚úÖ *Status:* Aprovado

A OS foi aprovada pelo cliente e est√° pronta para execu√ß√£o!

_Consert - Sistema de Gest√£o_`;

    try {
      const url = `https://graph.facebook.com/v19.0/${WHATSAPP_PHONE_NUMBER_ID}/messages`;
      const payload = {
        messaging_product: 'whatsapp',
        to: formattedNumber,
        type: 'text',
        text: { body: message },
      };

      const headers = {
        'Authorization': `Bearer ${WHATSAPP_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      };

      addLog(`üì§ Enviando para: ${url}`);
      addLog(`üì§ Para: ${formattedNumber}`);
      addLog(`üì§ Mensagem: ${message.substring(0, 100)}...`);

      const response = await fetch(url, {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(payload),
      });

      const responseData = await response.json();
      
      if (response.ok) {
        addLog(`‚úÖ ENVIO REAL: SUCESSO! ${JSON.stringify(responseData)}`);
      } else {
        addLog(`‚ùå ERRO ENVIO REAL: ${JSON.stringify(responseData)}`);
      }

      return NextResponse.json({
        success: response.ok,
        message: response.ok ? 'Mensagem enviada com sucesso!' : 'Erro ao enviar mensagem',
        osData: {
          id: osData.id,
          numero_os: osData.numero_os,
          status: osData.status,
          tecnico_id: osData.tecnico_id,
          cliente_nome: (osData.clientes as any)?.nome
        },
        tecnicoData: {
          id: tecnicoData.id,
          nome: tecnicoData.nome,
          whatsapp: tecnicoData.whatsapp,
          nivel: tecnicoData.nivel
        },
        formattedNumber: formattedNumber,
        whatsappResponse: responseData,
        logs: logs
      });

    } catch (whatsappError: any) {
      addLog(`‚ùå ERRO ENVIO REAL: ${whatsappError.message}`);
      return NextResponse.json({
        success: false,
        message: 'Erro ao enviar mensagem WhatsApp',
        osData: {
          id: osData.id,
          numero_os: osData.numero_os,
          status: osData.status,
          tecnico_id: osData.tecnico_id,
          cliente_nome: (osData.clientes as any)?.nome
        },
        tecnicoData: {
          id: tecnicoData.id,
          nome: tecnicoData.nome,
          whatsapp: tecnicoData.whatsapp,
          nivel: tecnicoData.nivel
        },
        formattedNumber: formattedNumber,
        error: whatsappError.message,
        logs: logs
      });
    }

  } catch (error: any) {
    addLog('‚ùå ERRO GERAL: ' + error.message);
    return NextResponse.json({ 
      error: 'Erro interno no debug', 
      details: error.message,
      logs: logs
    }, { status: 500 });
  }
}
