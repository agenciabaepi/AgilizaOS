import { NextRequest, NextResponse } from 'next/server'
import { getSupabaseAdmin } from '@/lib/supabase/admin'
import { enviarEmailVerificacao, gerarCodigoVerificacao } from '@/lib/email'

export async function POST(request: NextRequest) {
  try {
    const { email } = await request.json()
    console.log('üîç Debug - Reenvio de c√≥digo para:', email)

    // Validar par√¢metros obrigat√≥rios
    if (!email) {
      console.log('‚ùå Debug - Email n√£o fornecido')
      return NextResponse.json(
        { error: 'Email √© obrigat√≥rio' },
        { status: 400 }
      )
    }

    // Buscar usu√°rio pelo email
    const { data: usuario, error: usuarioError } = await getSupabaseAdmin()
      .from('usuarios')
      .select(`
        id,
        nome,
        email,
        email_verificado,
        empresa_id
      `)
      .eq('email', email)
      .eq('email_verificado', false)
      .single()

    console.log('üîç Debug - Busca de usu√°rio:', { usuario, usuarioError })
    
    if (usuarioError || !usuario) {
      console.log('‚ùå Debug - Usu√°rio n√£o encontrado ou email j√° verificado')
      return NextResponse.json(
        { error: 'Usu√°rio n√£o encontrado ou email j√° verificado' },
        { status: 404 }
      )
    }

    // Gerar novo c√≥digo de verifica√ß√£o
    const codigo = gerarCodigoVerificacao()

    // Invalidar c√≥digos anteriores do usu√°rio
    await getSupabaseAdmin()
      .from('codigo_verificacao')
      .update({ usado: true })
      .eq('usuario_id', usuario.id)
      .eq('usado', false)

    // Salvar novo c√≥digo no banco
    const { error: codigoError } = await getSupabaseAdmin()
      .from('codigo_verificacao')
      .insert({
        usuario_id: usuario.id,
        codigo: codigo,
        email: email,
        usado: false,
        expira_em: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 horas
      })

    if (codigoError) {
      console.error('Erro ao salvar c√≥digo:', codigoError)
      return NextResponse.json(
        { error: 'Erro interno do servidor' },
        { status: 500 }
      )
    }

    // Buscar nome da empresa se tiver empresa_id
    let nomeEmpresa = 'Empresa'
    if (usuario.empresa_id) {
      const { data: empresa } = await getSupabaseAdmin()
        .from('empresas')
        .select('nome')
        .eq('id', usuario.empresa_id)
        .single()
      
      if (empresa?.nome) {
        nomeEmpresa = empresa.nome
      }
    }
    
    // TESTE: Por enquanto, vamos apenas salvar o c√≥digo sem enviar email
    console.log('üîç Debug - TESTE: Salvando c√≥digo sem enviar email')
    console.log('üîç Debug - C√≥digo gerado:', codigo)
    console.log('üîç Debug - Email:', email)
    console.log('üîç Debug - Nome da empresa:', nomeEmpresa)
    
    // Simular sucesso para testar se o problema √© no email
    const emailEnviado = true
    
    console.log('‚úÖ Debug - TESTE: C√≥digo salvo com sucesso (email simulado)')

    return NextResponse.json({
      success: true,
      message: 'Novo c√≥digo de verifica√ß√£o enviado com sucesso'
    })

  } catch (error) {
    console.error('Erro na API de reenvio de c√≥digo:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}
