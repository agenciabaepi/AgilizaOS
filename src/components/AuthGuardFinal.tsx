'use client';

import { useEffect, useState } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { supabase } from '@/lib/supabaseClient';
import { useAuth } from '@/context/AuthContext';

interface AuthGuardFinalProps {
  children: React.ReactNode;
  requiredPermission?: string;
  fallbackPath?: string;
}

/**
 * AuthGuard Final - Vers√£o otimizada sem loops
 * Redirecionamento r√°pido mas seguro
 */
export default function AuthGuardFinal({ 
  children, 
  requiredPermission, 
  fallbackPath = '/dashboard' 
}: AuthGuardFinalProps) {
  const router = useRouter();
  const pathname = usePathname();
  const { usuarioData, loading: authContextLoading } = useAuth();
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [isRedirecting, setIsRedirecting] = useState(false);

  useEffect(() => {
    // Evitar m√∫ltiplas execu√ß√µes
    if (isRedirecting) return;
    
    console.log('‚ö° AuthGuardFinal: Verifica√ß√£o...');
    
    const checkAuth = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        
        console.log('üìä AuthGuardFinal: Sess√£o:', !!session);
        
        if (!session) {
          console.log('üö´ AuthGuardFinal: Redirecionando...');
          setIsRedirecting(true);
          
          // Pequeno delay para evitar loops
          setTimeout(() => {
            router.replace(`/login?redirect=${encodeURIComponent(pathname)}`);
          }, 50);
          
          return;
        }

        // Se tem sess√£o, mas AuthContext ainda carregando
        if (authContextLoading) {
          console.log('‚è≥ AuthGuardFinal: AuthContext ainda carregando...');
          setTimeout(checkAuth, 50);
          return;
        }

        // Verificar permiss√µes se necess√°rio
        if (requiredPermission) {
          if (!usuarioData) {
            console.log('‚è≥ AuthGuardFinal: Aguardando usuarioData para permiss√µes...');
            setTimeout(checkAuth, 50);
            return;
          }
          
          const hasPermission = checkPermission(usuarioData, requiredPermission);
          if (!hasPermission) {
            console.log(`üö´ AuthGuardFinal: Sem permiss√£o '${requiredPermission}', redirecionando para fallback.`);
            setIsRedirecting(true);
            setTimeout(() => {
              router.replace(fallbackPath);
            }, 50);
            return;
          }
        }
        
        // Se tem sess√£o e permiss√µes (se necess√°rio), autorizar
        console.log('‚úÖ AuthGuardFinal: Autorizado!');
        setIsAuthorized(true);
        
      } catch (err) {
        console.error('‚ùå AuthGuardFinal: Erro:', err);
        setIsRedirecting(true);
        setTimeout(() => {
          router.replace('/login');
        }, 50);
      }
    };

    checkAuth();
    
    // Timeout de seguran√ßa
    const timeout = setTimeout(() => {
      if (!isAuthorized && !isRedirecting) {
        console.log('‚ö†Ô∏è AuthGuardFinal: Timeout...');
        setIsRedirecting(true);
        router.replace('/login');
      }
    }, 200);
    
    return () => clearTimeout(timeout);
  }, [isAuthorized, isRedirecting, pathname, router, requiredPermission, fallbackPath, usuarioData, authContextLoading]);

  // Helper para verificar permiss√µes
  const checkPermission = (user: any, permission: string): boolean => {
    if (user.nivel === 'usuarioteste' || user.nivel === 'admin') return true;
    return user.permissoes && user.permissoes.includes(permission);
  };

  // Se est√° redirecionando, n√£o renderizar nada
  if (isRedirecting) {
    return null;
  }

  // Se n√£o est√° autorizado, n√£o renderizar nada
  if (!isAuthorized) {
    return null;
  }

  // Se est√° autorizado, renderizar conte√∫do
  return <>{children}</>;
}
