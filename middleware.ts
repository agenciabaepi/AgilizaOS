import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createClient } from '@supabase/supabase-js';

/**
 * Middleware de autentica√ß√£o - Primeira linha de defesa
 * 
 * Responsabilidades:
 * 1. Proteger rotas privadas de acesso n√£o autenticado
 * 2. Redirecionar usu√°rios n√£o logados para /login
 * 3. Evitar acesso a /login por usu√°rios j√° autenticados
 * 4. Preservar URL de destino para redirecionamento p√≥s-login
 */
export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // ‚úÖ OTIMIZADO: Logs apenas em desenvolvimento
  if (process.env.NODE_ENV === 'development') {
    console.log(`üîç Middleware: ${pathname}`);
  }
  
  // Lista de rotas p√∫blicas (n√£o exigem autentica√ß√£o)
  const publicPaths = [
    '/login',
    '/cadastro', 
    '/',
    '/sobre',
    '/termos',
    '/politicas-privacidade',
    '/planos',
    '/pagamentos/sucesso',
    '/pagamentos/falha',
    '/pagamentos/pendente',
    '/instrucoes-verificacao',
    '/clear-auth',
    '/clear-cache',
    '/os', // Rotas p√∫blicas de OS
  ];

  // Verificar se √© uma rota p√∫blica ou de API
  const isPublicPath = publicPaths.some(path => 
    pathname === path || pathname.startsWith(path + '/')
  );
  
  // Rotas de API n√£o devem ser bloqueadas pelo middleware de autentica√ß√£o
  const isApiRoute = pathname.startsWith('/api');
  const isStaticAsset = pathname.startsWith('/_next') || 
                       pathname.includes('.') || 
                       pathname.startsWith('/assets');
  
  // Se √© rota p√∫blica, API ou asset est√°tico, deixar passar
  if (isPublicPath || isApiRoute || isStaticAsset) {
    return NextResponse.next();
  }

  // ‚úÖ MELHORADO: Verificar sess√£o usando Supabase adequadamente
  try {
    // Procurar por cookies de autentica√ß√£o do Supabase
    const authCookies = request.cookies.getAll().filter(cookie => 
      cookie.name.startsWith('sb-') && 
      cookie.name.includes('auth-token')
    );

    // Se n√£o h√° cookies de autentica√ß√£o, redirecionar para login
    if (authCookies.length === 0) {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üö´ Middleware: Sem cookies de auth, redirecionando para login`);
      }
      
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(loginUrl);
    }

    // Verificar se h√° pelo menos um cookie com conte√∫do v√°lido
    const hasValidAuthCookie = authCookies.some(cookie => 
      cookie.value && cookie.value.length > 50 // JWT tokens s√£o longos
    );

    if (!hasValidAuthCookie) {
      if (process.env.NODE_ENV === 'development') {
        console.log(`üö´ Middleware: Cookies inv√°lidos, redirecionando para login`);
      }
      
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(loginUrl);
    }

    // ‚úÖ Passou pela verifica√ß√£o de cookies, permitir acesso
    // A verifica√ß√£o completa de sess√£o ser√° feita no client-side pelo AuthGuard
    return NextResponse.next();

  } catch (error) {
    // Em caso de erro, por seguran√ßa, redirecionar para login
    console.error('‚ùå Middleware: Erro na verifica√ß√£o:', error);
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(loginUrl);
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - api routes
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon and other static assets
     */
    '/((?!api|_next/static|_next/image|favicon.ico|.*\\.png|.*\\.jpg|.*\\.jpeg|.*\\.gif|.*\\.svg|.*\\.ico|.*\\.mp3|.*\\.mp4|.*\\.pdf).*)',
  ],
}
