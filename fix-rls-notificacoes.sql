-- =====================================================
-- CORRE√á√ÉO RLS GRADUAL - NOTIFICACOES
-- =====================================================
-- Este script habilita RLS apenas para a tabela notificacoes
-- para teste gradual sem quebrar o sistema

-- 1. VERIFICAR ESTADO ATUAL
-- =====================================================
-- Execute primeiro para ver o estado atual:
-- SELECT schemaname, tablename, rowsecurity FROM pg_tables WHERE tablename = 'notificacoes';

-- 2. HABILITAR RLS NA TABELA
-- =====================================================
ALTER TABLE public.notificacoes ENABLE ROW LEVEL SECURITY;

-- 3. CRIAR POL√çTICAS DE SEGURAN√áA
-- =====================================================

-- Pol√≠tica para SELECT - Usu√°rios s√≥ veem suas pr√≥prias notifica√ß√µes
CREATE POLICY "notificacoes_select_policy" ON public.notificacoes
    FOR SELECT USING (
        auth.role() = 'authenticated' AND 
        user_id = auth.uid()
    );

-- Pol√≠tica para INSERT - Usu√°rios podem criar notifica√ß√µes para si mesmos
CREATE POLICY "notificacoes_insert_policy" ON public.notificacoes
    FOR INSERT WITH CHECK (
        auth.role() = 'authenticated' AND 
        user_id = auth.uid()
    );

-- Pol√≠tica para UPDATE - Usu√°rios podem atualizar suas pr√≥prias notifica√ß√µes
CREATE POLICY "notificacoes_update_policy" ON public.notificacoes
    FOR UPDATE USING (
        auth.role() = 'authenticated' AND 
        user_id = auth.uid()
    );

-- Pol√≠tica para DELETE - Usu√°rios podem deletar suas pr√≥prias notifica√ß√µes
CREATE POLICY "notificacoes_delete_policy" ON public.notificacoes
    FOR DELETE USING (
        auth.role() = 'authenticated' AND 
        user_id = auth.uid()
    );

-- 4. VERIFICAR SE RLS EST√Å FUNCIONANDO
-- =====================================================
-- Execute estas queries para testar:

-- Verificar se RLS est√° habilitado:
-- SELECT schemaname, tablename, rowsecurity FROM pg_tables WHERE tablename = 'notificacoes';

-- Testar acesso (deve retornar apenas notifica√ß√µes do usu√°rio logado):
-- SELECT COUNT(*) FROM public.notificacoes;

-- Ver notifica√ß√µes dispon√≠veis:
-- SELECT id, titulo, lida, created_at FROM public.notificacoes ORDER BY created_at DESC;

-- 5. TESTAR A APLICA√á√ÉO
-- =====================================================
-- Ap√≥s executar este script:
-- 1. Teste se a aplica√ß√£o ainda funciona
-- 2. Verifique se consegue ver suas notifica√ß√µes
-- 3. Teste marcar notifica√ß√µes como lidas
-- 4. Verifique se n√£o consegue ver notifica√ß√µes de outros usu√°rios
-- 5. Teste se o sistema de notifica√ß√µes ainda funciona
-- 6. Se tudo funcionar, podemos prosseguir para a pr√≥xima tabela

-- 6. ROLLBACK (SE NECESS√ÅRIO)
-- =====================================================
-- Se algo quebrar, execute para reverter:
-- ALTER TABLE public.notificacoes DISABLE ROW LEVEL SECURITY;
-- DROP POLICY IF EXISTS "notificacoes_select_policy" ON public.notificacoes;
-- DROP POLICY IF EXISTS "notificacoes_insert_policy" ON public.notificacoes;
-- DROP POLICY IF EXISTS "notificacoes_update_policy" ON public.notificacoes;
-- DROP POLICY IF EXISTS "notificacoes_delete_policy" ON public.notificacoes;

-- =====================================================
-- STATUS DAS CORRE√á√ïES:
-- ‚úÖ catalogo_categorias - CORRIGIDA
-- ‚úÖ catalogo_itens - CORRIGIDA
-- ‚úÖ categorias_produtos - CORRIGIDA
-- ‚úÖ checklist_itens - CORRIGIDA (com pol√≠tica smart)
-- ‚úÖ configuracoes_comissao - CORRIGIDA
-- ‚úÖ configuracoes_empresa - CORRIGIDA
-- ‚úÖ equipamentos_tipos - CORRIGIDA (com pol√≠tica permissiva)
-- ‚úÖ grupos_produtos - CORRIGIDA
-- üîÑ notificacoes - EM TESTE
-- ‚è≥ ordens_servico - PENDENTE
-- ‚è≥ pagamentos - PENDENTE
-- =====================================================

